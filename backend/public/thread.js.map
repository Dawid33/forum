{
  "version": 3,
  "sources": ["../node_modules/snarkdown/src/index.js", "../javascript/thread.js"],
  "sourcesContent": ["const TAGS = {\n\t'': ['<em>','</em>'],\n\t_: ['<strong>','</strong>'],\n\t'*': ['<strong>','</strong>'],\n\t'~': ['<s>','</s>'],\n\t'\\n': ['<br />'],\n\t' ': ['<br />'],\n\t'-': ['<hr />']\n};\n\n/** Outdent a string based on the first indented line's leading whitespace\n *\t@private\n */\nfunction outdent(str) {\n\treturn str.replace(RegExp('^'+(str.match(/^(\\t| )+/) || '')[0], 'gm'), '');\n}\n\n/** Encode special attribute characters to HTML entities in a String.\n *\t@private\n */\nfunction encodeAttr(str) {\n\treturn (str+'').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\n/** Parse Markdown into an HTML String. */\nexport default function parse(md, prevLinks) {\n\tlet tokenizer = /((?:^|\\n+)(?:\\n---+|\\* \\*(?: \\*)+)\\n)|(?:^``` *(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:!\\[([^\\]]*?)\\]\\(([^)]+?)\\))|(\\[)|(\\](?:\\(([^)]+?)\\))?)|(?:(?:^|\\n+)([^\\s].*)\\n(-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,6})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*]|~~)/gm,\n\t\tcontext = [],\n\t\tout = '',\n\t\tlinks = prevLinks || {},\n\t\tlast = 0,\n\t\tchunk, prev, token, inner, t;\n\n\tfunction tag(token) {\n\t\tlet desc = TAGS[token[1] || ''];\n\t\tlet end = context[context.length-1] == token;\n\t\tif (!desc) return token;\n\t\tif (!desc[1]) return desc[0];\n\t\tif (end) context.pop();\n\t\telse context.push(token);\n\t\treturn desc[end|0];\n\t}\n\n\tfunction flush() {\n\t\tlet str = '';\n\t\twhile (context.length) str += tag(context[context.length-1]);\n\t\treturn str;\n\t}\n\n\tmd = md.replace(/^\\[(.+?)\\]:\\s*(.+)$/gm, (s, name, url) => {\n\t\tlinks[name.toLowerCase()] = url;\n\t\treturn '';\n\t}).replace(/^\\n+|\\n+$/g, '');\n\n\twhile ( (token=tokenizer.exec(md)) ) {\n\t\tprev = md.substring(last, token.index);\n\t\tlast = tokenizer.lastIndex;\n\t\tchunk = token[0];\n\t\tif (prev.match(/[^\\\\](\\\\\\\\)*\\\\$/)) {\n\t\t\t// escaped\n\t\t}\n\t\t// Code/Indent blocks:\n\t\telse if (t = (token[3] || token[4])) {\n\t\t\tchunk = '<pre class=\"code '+(token[4]?'poetry':token[2].toLowerCase())+'\"><code'+(token[2] ? ` class=\"language-${token[2].toLowerCase()}\"` : '')+'>'+outdent(encodeAttr(t).replace(/^\\n+|\\n+$/g, ''))+'</code></pre>';\n\t\t}\n\t\t// > Quotes, -* lists:\n\t\telse if (t = token[6]) {\n\t\t\tif (t.match(/\\./)) {\n\t\t\t\ttoken[5] = token[5].replace(/^\\d+/gm, '');\n\t\t\t}\n\t\t\tinner = parse(outdent(token[5].replace(/^\\s*[>*+.-]/gm, '')));\n\t\t\tif (t=='>') t = 'blockquote';\n\t\t\telse {\n\t\t\t\tt = t.match(/\\./) ? 'ol' : 'ul';\n\t\t\t\tinner = inner.replace(/^(.*)(\\n|$)/gm, '<li>$1</li>');\n\t\t\t}\n\t\t\tchunk = '<'+t+'>' + inner + '</'+t+'>';\n\t\t}\n\t\t// Images:\n\t\telse if (token[8]) {\n\t\t\tchunk = `<img src=\"${encodeAttr(token[8])}\" alt=\"${encodeAttr(token[7])}\">`;\n\t\t}\n\t\t// Links:\n\t\telse if (token[10]) {\n\t\t\tout = out.replace('<a>', `<a href=\"${encodeAttr(token[11] || links[prev.toLowerCase()])}\">`);\n\t\t\tchunk = flush() + '</a>';\n\t\t}\n\t\telse if (token[9]) {\n\t\t\tchunk = '<a>';\n\t\t}\n\t\t// Headings:\n\t\telse if (token[12] || token[14]) {\n\t\t\tt = 'h' + (token[14] ? token[14].length : (token[13]>'=' ? 1 : 2));\n\t\t\tchunk = '<'+t+'>' + parse(token[12] || token[15], links) + '</'+t+'>';\n\t\t}\n\t\t// `code`:\n\t\telse if (token[16]) {\n\t\t\tchunk = '<code>'+encodeAttr(token[16])+'</code>';\n\t\t}\n\t\t// Inline formatting: *em*, **strong** & friends\n\t\telse if (token[17] || token[1]) {\n\t\t\tchunk = tag(token[17] || '--');\n\t\t}\n\t\tout += prev;\n\t\tout += chunk;\n\t}\n\n\treturn (out + md.substring(last) + flush()).replace(/^\\n+|\\n+$/g, '');\n}\n", "import snarkdown from 'snarkdown';\n\nfunction run() {\n    let html = snarkdown(document.getElementById(\"in\").value);\n    document.getElementById(\"out\").innerHTML = html;\n    document.getElementById(\"code\").textContent = html;\n}\n\ndocument.getElementById(\"in\").oninput = run;\n\nrun();\n"],
  "mappings": ";;AAAA,MAAM,IAAO,EACZ,IAAI,CAAC,QAAO,UACZ,GAAG,CAAC,YAAW,cACf,KAAK,CAAC,YAAW,cACjB,KAAK,CAAC,OAAM,SACZ,MAAM,CAAC,WACP,KAAK,CAAC,WACN,KAAK,CAAC;AAMP,aAAiB,IAAA;AAChB,WAAO,GAAI,QAAQ,OAAO,MAAK,IAAI,MAAM,eAAe,IAAI,IAAI,OAAO;;AAMxE,aAAoB,IAAA;AACnB,WAAQ,MAAI,IAAI,QAAQ,MAAM,UAAU,QAAQ,MAAM,QAAQ,QAAQ,MAAM;;AAAA,aAI/C,GAAI,GAAA;AACjC,QAKC,GAAO,GAAM,GAAO,GAAO,GALxB,IAAY,mVACf,IAAU,IACV,IAAM,IACN,IAAQ,KAAa,IACrB,IAAO;AAGR,eAAa,IAAA;AACZ,UAAI,KAAO,EAAK,GAAM,MAAM,KACxB,KAAM,EAAQ,EAAQ,SAAO,MAAM;AACvC,aAAK,KACA,GAAK,KACN,MAAK,EAAQ,QACZ,EAAQ,KAAK,KACX,GAAS,IAAJ,OAHS,GAAK,KADR;;AAOnB,iBAAS;AAER,eADI,KAAM,IACH,EAAQ;AAAQ,cAAO,EAAI,EAAQ,EAAQ,SAAO;AACzD,aAAO;;AAQR,SALA,IAAK,EAAG,QAAQ,yBAAyB,SAAC,IAAG,IAAM,IAAA;AAElD,aADA,EAAM,GAAK,iBAAiB,IACrB;OACL,QAAQ,cAAc,KAEhB,IAAM,EAAU,KAAK;AAC7B,UAAO,EAAG,UAAU,GAAM,EAAM,QAChC,IAAO,EAAU,WACjB,IAAQ,EAAM,IACV,EAAK,MAAM,sBAIN,MAAK,EAAM,MAAM,EAAM,MAC/B,IAAQ,sBAAqB,GAAM,KAAG,WAAS,EAAM,GAAG,iBAAe,YAAW,GAAM,KAAA,sBAAyB,EAAM,GAAG,gBAAA,MAAmB,MAAI,MAAI,EAAQ,EAAW,GAAG,QAAQ,cAAc,OAAK,kBAG9L,KAAI,EAAM,MACd,GAAE,MAAM,SACX,GAAM,KAAK,EAAM,GAAG,QAAQ,UAAU,MAEvC,IAAQ,EAAM,EAAQ,EAAM,GAAG,QAAQ,iBAAiB,OACjD,AAAH,KAAG,MAAK,IAAI,eAEf,KAAI,EAAE,MAAM,QAAQ,OAAO,MAC3B,IAAQ,EAAM,QAAQ,iBAAiB,iBAExC,IAAQ,MAAI,IAAE,MAAM,IAAQ,OAAK,IAAE,OAG3B,EAAM,KACd,IAAA,eAAqB,EAAW,EAAM,MAAA,YAAa,EAAW,EAAM,MAAA,OAG5D,EAAM,MACd,KAAM,EAAI,QAAQ,OAAA,cAAmB,EAAW,EAAM,OAAO,EAAM,EAAK,kBAAA,OACxE,IAAQ,MAAU,UAEV,EAAM,KACd,IAAQ,QAGA,EAAM,OAAO,EAAM,MAE3B,IAAQ,MADR,KAAI,MAAO,GAAM,MAAM,EAAM,IAAI,SAAU,EAAM,MAAI,MAAM,IAAI,MACjD,MAAM,EAAM,EAAM,OAAO,EAAM,KAAK,KAAS,OAAK,IAAE,MAG1D,EAAM,MACd,IAAQ,WAAS,EAAW,EAAM,OAAK,YAG/B,GAAM,OAAO,EAAM,OAC3B,KAAQ,EAAI,EAAM,OAAO,SAE1B,KAAO,GACP,KAAO;AAGR,WAAQ,KAAM,EAAG,UAAU,KAAQ,KAAS,QAAQ,cAAc;;;;ACzGnE,iBAAe;AACX,QAAI,OAAO,EAAU,SAAS,eAAe,MAAM;AACnD,aAAS,eAAe,OAAO,YAAY;AAC3C,aAAS,eAAe,QAAQ,cAAc;AAAA;AAGlD,WAAS,eAAe,MAAM,UAAU;AAExC;",
  "names": []
}
