{
  "version": 3,
  "sources": ["../node_modules/snarkdown/src/index.js", "../javascript/thread.js"],
  "sourcesContent": ["const TAGS = {\n\t'': ['<em>','</em>'],\n\t_: ['<strong>','</strong>'],\n\t'*': ['<strong>','</strong>'],\n\t'~': ['<s>','</s>'],\n\t'\\n': ['<br />'],\n\t' ': ['<br />'],\n\t'-': ['<hr />']\n};\n\n/** Outdent a string based on the first indented line's leading whitespace\n *\t@private\n */\nfunction outdent(str) {\n\treturn str.replace(RegExp('^'+(str.match(/^(\\t| )+/) || '')[0], 'gm'), '');\n}\n\n/** Encode special attribute characters to HTML entities in a String.\n *\t@private\n */\nfunction encodeAttr(str) {\n\treturn (str+'').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\n/** Parse Markdown into an HTML String. */\nexport default function parse(md, prevLinks) {\n\tlet tokenizer = /((?:^|\\n+)(?:\\n---+|\\* \\*(?: \\*)+)\\n)|(?:^``` *(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:!\\[([^\\]]*?)\\]\\(([^)]+?)\\))|(\\[)|(\\](?:\\(([^)]+?)\\))?)|(?:(?:^|\\n+)([^\\s].*)\\n(-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,6})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*]|~~)/gm,\n\t\tcontext = [],\n\t\tout = '',\n\t\tlinks = prevLinks || {},\n\t\tlast = 0,\n\t\tchunk, prev, token, inner, t;\n\n\tfunction tag(token) {\n\t\tlet desc = TAGS[token[1] || ''];\n\t\tlet end = context[context.length-1] == token;\n\t\tif (!desc) return token;\n\t\tif (!desc[1]) return desc[0];\n\t\tif (end) context.pop();\n\t\telse context.push(token);\n\t\treturn desc[end|0];\n\t}\n\n\tfunction flush() {\n\t\tlet str = '';\n\t\twhile (context.length) str += tag(context[context.length-1]);\n\t\treturn str;\n\t}\n\n\tmd = md.replace(/^\\[(.+?)\\]:\\s*(.+)$/gm, (s, name, url) => {\n\t\tlinks[name.toLowerCase()] = url;\n\t\treturn '';\n\t}).replace(/^\\n+|\\n+$/g, '');\n\n\twhile ( (token=tokenizer.exec(md)) ) {\n\t\tprev = md.substring(last, token.index);\n\t\tlast = tokenizer.lastIndex;\n\t\tchunk = token[0];\n\t\tif (prev.match(/[^\\\\](\\\\\\\\)*\\\\$/)) {\n\t\t\t// escaped\n\t\t}\n\t\t// Code/Indent blocks:\n\t\telse if (t = (token[3] || token[4])) {\n\t\t\tchunk = '<pre class=\"code '+(token[4]?'poetry':token[2].toLowerCase())+'\"><code'+(token[2] ? ` class=\"language-${token[2].toLowerCase()}\"` : '')+'>'+outdent(encodeAttr(t).replace(/^\\n+|\\n+$/g, ''))+'</code></pre>';\n\t\t}\n\t\t// > Quotes, -* lists:\n\t\telse if (t = token[6]) {\n\t\t\tif (t.match(/\\./)) {\n\t\t\t\ttoken[5] = token[5].replace(/^\\d+/gm, '');\n\t\t\t}\n\t\t\tinner = parse(outdent(token[5].replace(/^\\s*[>*+.-]/gm, '')));\n\t\t\tif (t=='>') t = 'blockquote';\n\t\t\telse {\n\t\t\t\tt = t.match(/\\./) ? 'ol' : 'ul';\n\t\t\t\tinner = inner.replace(/^(.*)(\\n|$)/gm, '<li>$1</li>');\n\t\t\t}\n\t\t\tchunk = '<'+t+'>' + inner + '</'+t+'>';\n\t\t}\n\t\t// Images:\n\t\telse if (token[8]) {\n\t\t\tchunk = `<img src=\"${encodeAttr(token[8])}\" alt=\"${encodeAttr(token[7])}\">`;\n\t\t}\n\t\t// Links:\n\t\telse if (token[10]) {\n\t\t\tout = out.replace('<a>', `<a href=\"${encodeAttr(token[11] || links[prev.toLowerCase()])}\">`);\n\t\t\tchunk = flush() + '</a>';\n\t\t}\n\t\telse if (token[9]) {\n\t\t\tchunk = '<a>';\n\t\t}\n\t\t// Headings:\n\t\telse if (token[12] || token[14]) {\n\t\t\tt = 'h' + (token[14] ? token[14].length : (token[13]>'=' ? 1 : 2));\n\t\t\tchunk = '<'+t+'>' + parse(token[12] || token[15], links) + '</'+t+'>';\n\t\t}\n\t\t// `code`:\n\t\telse if (token[16]) {\n\t\t\tchunk = '<code>'+encodeAttr(token[16])+'</code>';\n\t\t}\n\t\t// Inline formatting: *em*, **strong** & friends\n\t\telse if (token[17] || token[1]) {\n\t\t\tchunk = tag(token[17] || '--');\n\t\t}\n\t\tout += prev;\n\t\tout += chunk;\n\t}\n\n\treturn (out + md.substring(last) + flush()).replace(/^\\n+|\\n+$/g, '');\n}\n", "import snarkdown from 'snarkdown';\nlet $ = document.querySelector.bind(document);\n\n// Not using #in if running js\n$('#in').name = \"empty\"\n$('#js-text').name = \"text\"\n\nfunction run() {\n    let html = snarkdown($('#in').value);\n    $('#out').innerHTML = html;\n    $('#js-text').value = html;\n}\n\n$('#in').oninput = run;\n\nrun();\n"],
  "mappings": "MAAA,GAAM,GAAO,CACZ,GAAI,CAAC,OAAO,SACZ,EAAG,CAAC,WAAW,aACf,IAAK,CAAC,WAAW,aACjB,IAAK,CAAC,MAAM,QACZ,KAAM,CAAC,UACP,IAAK,CAAC,UACN,IAAK,CAAC,WAMP,WAAiB,EAAA,CAChB,MAAO,GAAI,QAAQ,OAAO,IAAK,GAAI,MAAM,aAAe,IAAI,GAAI,MAAO,IAMxE,WAAoB,EAAA,CACnB,MAAQ,GAAI,IAAI,QAAQ,KAAM,UAAU,QAAQ,KAAM,QAAQ,QAAQ,KAAM,QAAA,WAI/C,EAAI,EAAA,CACjC,GAKC,GAAO,EAAM,EAAO,EAAO,EALxB,EAAY,kVACf,EAAU,GACV,EAAM,GACN,EAAQ,GAAa,GACrB,EAAO,EAGR,WAAa,EAAA,CACZ,GAAI,GAAO,EAAK,EAAM,IAAM,IACxB,EAAM,EAAQ,EAAQ,OAAO,IAAM,EACvC,MAAK,GACA,EAAK,GACN,GAAK,EAAQ,MACZ,EAAQ,KAAK,GACX,EAAS,EAAJ,IAHS,EAAK,GADR,EAOnB,YAAS,CAER,OADI,GAAM,GACH,EAAQ,QAAQ,GAAO,EAAI,EAAQ,EAAQ,OAAO,IACzD,MAAO,GAQR,IALA,EAAK,EAAG,QAAQ,wBAAyB,SAAC,EAAG,EAAM,EAAA,CAElD,MADA,GAAM,EAAK,eAAiB,EACrB,KACL,QAAQ,aAAc,IAEhB,EAAM,EAAU,KAAK,IAC7B,EAAO,EAAG,UAAU,EAAM,EAAM,OAChC,EAAO,EAAU,UACjB,EAAQ,EAAM,GACV,EAAK,MAAM,oBAIN,IAAK,EAAM,IAAM,EAAM,IAC/B,EAAQ,oBAAqB,GAAM,GAAG,SAAS,EAAM,GAAG,eAAe,UAAW,GAAM,GAAA,oBAAyB,EAAM,GAAG,cAAA,IAAmB,IAAI,IAAI,EAAQ,EAAW,GAAG,QAAQ,aAAc,KAAK,gBAG9L,GAAI,EAAM,IACd,GAAE,MAAM,OACX,GAAM,GAAK,EAAM,GAAG,QAAQ,SAAU,KAEvC,EAAQ,EAAM,EAAQ,EAAM,GAAG,QAAQ,gBAAiB,MACjD,AAAH,GAAG,IAAK,EAAI,aAEf,GAAI,EAAE,MAAM,MAAQ,KAAO,KAC3B,EAAQ,EAAM,QAAQ,gBAAiB,gBAExC,EAAQ,IAAI,EAAE,IAAM,EAAQ,KAAK,EAAE,KAG3B,EAAM,GACd,EAAA,aAAqB,EAAW,EAAM,IAAA,UAAa,EAAW,EAAM,IAAA,KAG5D,EAAM,IACd,GAAM,EAAI,QAAQ,MAAA,YAAmB,EAAW,EAAM,KAAO,EAAM,EAAK,gBAAA,MACxE,EAAQ,IAAU,QAEV,EAAM,GACd,EAAQ,MAGA,EAAM,KAAO,EAAM,IAE3B,EAAQ,IADR,GAAI,IAAO,GAAM,IAAM,EAAM,IAAI,OAAU,EAAM,IAAI,IAAM,EAAI,IACjD,IAAM,EAAM,EAAM,KAAO,EAAM,IAAK,GAAS,KAAK,EAAE,IAG1D,EAAM,IACd,EAAQ,SAAS,EAAW,EAAM,KAAK,UAG/B,GAAM,KAAO,EAAM,KAC3B,GAAQ,EAAI,EAAM,KAAO,QAE1B,GAAO,EACP,GAAO,EAGR,MAAQ,GAAM,EAAG,UAAU,GAAQ,KAAS,QAAQ,aAAc,IC1GnE,GAAI,GAAI,SAAS,cAAc,KAAK,UAGpC,EAAE,OAAO,KAAO,QAChB,EAAE,YAAY,KAAO,OAErB,YAAe,CACX,GAAI,GAAO,EAAU,EAAE,OAAO,OAC9B,EAAE,QAAQ,UAAY,EACtB,EAAE,YAAY,MAAQ,EAG1B,EAAE,OAAO,QAAU,EAEnB",
  "names": []
}
